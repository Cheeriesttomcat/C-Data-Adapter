//*********************************************************************************
// Implementation for a stack adapted from a deque
//
//
// Last modified 10/22/19 Howard Akers
//*********************************************************************************
#include "Deque.h"
#include "Stack.h"

//*********************************************************************************
// Constructor
//
//*********************************************************************************
template <typename E>
Stack<E>::Stack()
: S() {}

//*********************************************************************************
// Destructor
//
//*********************************************************************************
template <typename E>
Stack<E>::~Stack()
{
}

//*********************************************************************************
// Add stuff
//
//*********************************************************************************
template <typename E>
void Stack<E>::push(const E& e)
{
	S.insertFront(e);
}

//*********************************************************************************
// Remove stuff
//
//*********************************************************************************
template <typename E>
const E& Stack<E>::pop()
{
	return S.eraseFront();
}

//*********************************************************************************
// What is in front?
//
//*********************************************************************************
template <typename E>
const E& Stack<E>::top() const
{
	return S.front();
}

//*********************************************************************************
// What is the size?
//
//*********************************************************************************
template <typename E>
int Stack<E>::size() const
{
	return S.size();
}

//*********************************************************************************
// Is it empty?
//
//*********************************************************************************
template <typename E>
bool Stack<E>::empty() const
{
	return S.empty();
}
