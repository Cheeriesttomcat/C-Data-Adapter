//*********************************************************************************
// Implementation for a Queue adapted from a deque
//
//
// Last modified 10/22/19 Howard Akers
//*********************************************************************************
#include "Deque.h"
#include "Queue.h"

//*********************************************************************************
// Constructor
//
//*********************************************************************************
template <typename E>
Queue<E>::Queue()
: D() {}

//*********************************************************************************
// Destructor
//
//*********************************************************************************
template <typename E>
Queue<E>::~Queue()
{
	
}

//*********************************************************************************
// Add stuff
//
//*********************************************************************************
template <typename E>
void Queue<E>::enqueue(const E& e)
{
	D.insertBack(e);
}

//*********************************************************************************
// Remove stuff
//
//*********************************************************************************
template <typename E>
const E& Queue<E>::dequeue()
{
	return D.eraseFront();
}

//*********************************************************************************
// What is in front?
//
//*********************************************************************************
template <typename E>
const E& Queue<E>::front() const
{
	return D.front();
}

//*********************************************************************************
// What is the size?
//
//*********************************************************************************
template <typename E>
int Queue<E>::size() const
{
	return D.size();
}

//*********************************************************************************
// Is it empty?
//
//*********************************************************************************
template <typename E>
bool Queue<E>::empty() const
{
	return D.empty();
}
